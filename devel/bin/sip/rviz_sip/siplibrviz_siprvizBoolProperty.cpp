/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Feb  5 05:37:39 2016
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "bool_property.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/properties/bool_property.h>
#line 13 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

#line 36 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 7 "property.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/properties/property.h>
#line 21 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 34 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 24 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 28 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 35 "/usr/share/sip/PyQt4/QtGui/qwidget.sip"
#include <qwidget.h>
#line 31 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 1009 "/usr/share/sip/PyQt4/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 34 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 35 "/usr/share/sip/PyQt4/QtGui/qpainter.sip"
#include <qpainter.h>
#line 37 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 35 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 40 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 241 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 310 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 298 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 33 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 37 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 58 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 35 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 120 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 67 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 35 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 70 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 73 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"


class siprviz_BoolProperty : public rviz::BoolProperty
{
public:
    siprviz_BoolProperty(const QString&,bool,const QString&,rviz::Property *,const char *,QObject *);
    virtual ~siprviz_BoolProperty();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool getBool() const;
    void removeChildren(int,int);
    bool setValue(const QVariant&);
    QVariant getValue() const;
    void setName(const QString&);
    QString getName() const;
    void setDescription(const QString&);
    QString getDescription() const;
    int numChildren() const;
    rviz::Property * childAtUnchecked(int) const;
    QVariant getViewData(int,int) const;
    Qt::ItemFlags getViewFlags(int) const;
    bool paint(QPainter *,const QStyleOptionViewItem&) const;
    QWidget * createEditor(QWidget *,const QStyleOptionViewItem&);
    rviz::Property * takeChildAt(int);
    void addChild(rviz::Property *,int);
    void moveChild(int,int);
    void load(const rviz::Config&);
    void save(rviz::Config) const;
    void setHidden(bool);
    bool getHidden() const;
    void setReadOnly(bool);
    bool getReadOnly();
    void collapse();
    void expand();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siprviz_BoolProperty(const siprviz_BoolProperty &);
    siprviz_BoolProperty &operator = (const siprviz_BoolProperty &);

    char sipPyMethods[32];
};

siprviz_BoolProperty::siprviz_BoolProperty(const QString& a0,bool a1,const QString& a2,rviz::Property *a3,const char *a4,QObject *a5): rviz::BoolProperty(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siprviz_BoolProperty::~siprviz_BoolProperty()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *siprviz_BoolProperty::metaObject() const
{
    return sip_librviz_sip_qt_metaobject(sipPySelf,sipType_rviz_BoolProperty);
}

int siprviz_BoolProperty::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = rviz::BoolProperty::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_librviz_sip_qt_metacall(sipPySelf,sipType_rviz_BoolProperty,_c,_id,_a);

    return _id;
}

void *siprviz_BoolProperty::qt_metacast(const char *_clname)
{
    return (sip_librviz_sip_qt_metacast && sip_librviz_sip_qt_metacast(sipPySelf,sipType_rviz_BoolProperty,_clname)) ? this : rviz::BoolProperty::qt_metacast(_clname);
}

bool siprviz_BoolProperty::getBool() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_getBool);

    if (!sipMeth)
        return rviz::BoolProperty::getBool();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[7]))(sipGILState,sipMeth);
}

void siprviz_BoolProperty::removeChildren(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_removeChildren);

    if (!sipMeth)
    {
        rviz::Property::removeChildren(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_librviz_sip_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

bool siprviz_BoolProperty::setValue(const QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setValue);

    if (!sipMeth)
        return rviz::Property::setValue(a0);

    extern bool sipVH_librviz_sip_12(sip_gilstate_t,PyObject *,const QVariant&);

    return sipVH_librviz_sip_12(sipGILState,sipMeth,a0);
}

QVariant siprviz_BoolProperty::getValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_getValue);

    if (!sipMeth)
        return rviz::Property::getValue();

    extern QVariant sipVH_librviz_sip_11(sip_gilstate_t,PyObject *);

    return sipVH_librviz_sip_11(sipGILState,sipMeth);
}

void siprviz_BoolProperty::setName(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setName);

    if (!sipMeth)
    {
        rviz::Property::setName(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

QString siprviz_BoolProperty::getName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_getName);

    if (!sipMeth)
        return rviz::Property::getName();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[62]))(sipGILState,sipMeth);
}

void siprviz_BoolProperty::setDescription(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setDescription);

    if (!sipMeth)
    {
        rviz::Property::setDescription(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[33]))(sipGILState,sipMeth,a0);
}

QString siprviz_BoolProperty::getDescription() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_getDescription);

    if (!sipMeth)
        return rviz::Property::getDescription();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[62]))(sipGILState,sipMeth);
}

int siprviz_BoolProperty::numChildren() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_numChildren);

    if (!sipMeth)
        return rviz::Property::numChildren();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[6]))(sipGILState,sipMeth);
}

rviz::Property * siprviz_BoolProperty::childAtUnchecked(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_childAtUnchecked);

    if (!sipMeth)
        return rviz::Property::childAtUnchecked(a0);

    extern rviz::Property * sipVH_librviz_sip_8(sip_gilstate_t,PyObject *,int);

    return sipVH_librviz_sip_8(sipGILState,sipMeth,a0);
}

QVariant siprviz_BoolProperty::getViewData(int a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_getViewData);

    if (!sipMeth)
        return rviz::Property::getViewData(a0,a1);

    typedef QVariant (*sipVH_QtGui_43)(sip_gilstate_t,PyObject *,int,int);

    return ((sipVH_QtGui_43)(sipModuleAPI_librviz_sip_QtGui->em_virthandlers[43]))(sipGILState,sipMeth,a0,a1);
}

Qt::ItemFlags siprviz_BoolProperty::getViewFlags(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_getViewFlags);

    if (!sipMeth)
        return rviz::Property::getViewFlags(a0);

    extern Qt::ItemFlags sipVH_librviz_sip_6(sip_gilstate_t,PyObject *,int);

    return sipVH_librviz_sip_6(sipGILState,sipMeth,a0);
}

bool siprviz_BoolProperty::paint(QPainter *a0,const QStyleOptionViewItem& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
        return rviz::Property::paint(a0,a1);

    extern bool sipVH_librviz_sip_10(sip_gilstate_t,PyObject *,QPainter *,const QStyleOptionViewItem&);

    return sipVH_librviz_sip_10(sipGILState,sipMeth,a0,a1);
}

QWidget * siprviz_BoolProperty::createEditor(QWidget *a0,const QStyleOptionViewItem& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_createEditor);

    if (!sipMeth)
        return rviz::Property::createEditor(a0,a1);

    extern QWidget * sipVH_librviz_sip_9(sip_gilstate_t,PyObject *,QWidget *,const QStyleOptionViewItem&);

    return sipVH_librviz_sip_9(sipGILState,sipMeth,a0,a1);
}

rviz::Property * siprviz_BoolProperty::takeChildAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_takeChildAt);

    if (!sipMeth)
        return rviz::Property::takeChildAt(a0);

    extern rviz::Property * sipVH_librviz_sip_8(sip_gilstate_t,PyObject *,int);

    return sipVH_librviz_sip_8(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::addChild(rviz::Property *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_addChild);

    if (!sipMeth)
    {
        rviz::Property::addChild(a0,a1);
        return;
    }

    extern void sipVH_librviz_sip_7(sip_gilstate_t,PyObject *,rviz::Property *,int);

    sipVH_librviz_sip_7(sipGILState,sipMeth,a0,a1);
}

void siprviz_BoolProperty::moveChild(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_moveChild);

    if (!sipMeth)
    {
        rviz::Property::moveChild(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t,PyObject *,int,int);

    ((sipVH_QtGui_32)(sipModuleAPI_librviz_sip_QtGui->em_virthandlers[32]))(sipGILState,sipMeth,a0,a1);
}

void siprviz_BoolProperty::load(const rviz::Config& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_load);

    if (!sipMeth)
    {
        rviz::Property::load(a0);
        return;
    }

    extern void sipVH_librviz_sip_1(sip_gilstate_t,PyObject *,const rviz::Config&);

    sipVH_librviz_sip_1(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::save(rviz::Config a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_save);

    if (!sipMeth)
    {
        rviz::Property::save(a0);
        return;
    }

    extern void sipVH_librviz_sip_0(sip_gilstate_t,PyObject *,rviz::Config);

    sipVH_librviz_sip_0(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::setHidden(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setHidden);

    if (!sipMeth)
    {
        rviz::Property::setHidden(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_librviz_sip_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

bool siprviz_BoolProperty::getHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_getHidden);

    if (!sipMeth)
        return rviz::Property::getHidden();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[7]))(sipGILState,sipMeth);
}

void siprviz_BoolProperty::setReadOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setReadOnly);

    if (!sipMeth)
    {
        rviz::Property::setReadOnly(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_librviz_sip_QtGui->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

bool siprviz_BoolProperty::getReadOnly()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_getReadOnly);

    if (!sipMeth)
        return rviz::Property::getReadOnly();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[7]))(sipGILState,sipMeth);
}

void siprviz_BoolProperty::collapse()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_collapse);

    if (!sipMeth)
    {
        rviz::Property::collapse();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

void siprviz_BoolProperty::expand()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_expand);

    if (!sipMeth)
    {
        rviz::Property::expand();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[11]))(sipGILState,sipMeth);
}

bool siprviz_BoolProperty::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[5]))(sipGILState,sipMeth,a0);
}

bool siprviz_BoolProperty::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[18]))(sipGILState,sipMeth,a0,a1);
}

void siprviz_BoolProperty::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[9]))(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[25]))(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[17]))(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

void siprviz_BoolProperty::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_librviz_sip_QtCore->em_virthandlers[24]))(sipGILState,sipMeth,a0);
}

QObject * siprviz_BoolProperty::sipProtect_sender() const
{
    return QObject::sender();
}

int siprviz_BoolProperty::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void siprviz_BoolProperty::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void siprviz_BoolProperty::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void siprviz_BoolProperty::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int siprviz_BoolProperty::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_rviz_BoolProperty_sender(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
            QObject *sipRes = 0;

#line 635 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL ad Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (helper)
            sipRes = helper(sipRes);
#line 781 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_receivers(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 661 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        // PyQt5: Get rid of the const casts.
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(const_cast<QObject *>(sipCpp), a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 824 "/home/kiran/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizBoolProperty.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_childEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_customEvent(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_senderSignalIndex(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const siprviz_BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_getBool(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_getBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const rviz::BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_BoolProperty, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->rviz::BoolProperty::getBool() : sipCpp->getBool());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_getBool, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_BoolProperty_setBool(PyObject *, PyObject *);}
static PyObject *meth_rviz_BoolProperty_setBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        rviz::BoolProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_rviz_BoolProperty, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setBool(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoolProperty, sipName_setBool, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_rviz_BoolProperty(void *, const sipTypeDef *);}
static void *cast_rviz_BoolProperty(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_rviz_BoolProperty)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_rviz_Property)->ctd_cast((rviz::Property *)(rviz::BoolProperty *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_BoolProperty(void *, int);}
static void release_rviz_BoolProperty(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    rviz::BoolProperty *sipCpp = reinterpret_cast<rviz::BoolProperty *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_rviz_BoolProperty(sipSimpleWrapper *);}
static void dealloc_rviz_BoolProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siprviz_BoolProperty *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_rviz_BoolProperty(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_rviz_BoolProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_rviz_BoolProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siprviz_BoolProperty *sipCpp = 0;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        bool a1 = 0;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        rviz::Property * a3 = 0;
        const char * a4 = 0;
        QObject * a5 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|J1bJ1J8sJ8", sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_rviz_Property, &a3, &a4, sipType_QObject, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new siprviz_BoolProperty(*a0,a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_BoolProperty[] = {{9, 255, 1}};


static PyMethodDef methods_rviz_BoolProperty[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_rviz_BoolProperty_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_rviz_BoolProperty_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_rviz_BoolProperty_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_rviz_BoolProperty_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getBool), meth_rviz_BoolProperty_getBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_rviz_BoolProperty_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_rviz_BoolProperty_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), meth_rviz_BoolProperty_senderSignalIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBool), meth_rviz_BoolProperty_setBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_rviz_BoolProperty_timerEvent, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_librviz_sip_rviz_BoolProperty = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_rviz__BoolProperty,
        {0}
    },
    {
        sipNameNr_BoolProperty,
        {0, 255, 0},
        10, methods_rviz_BoolProperty,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_rviz_BoolProperty,
    0,
    init_rviz_BoolProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_rviz_BoolProperty,
    0,
    0,
    0,
    release_rviz_BoolProperty,
    cast_rviz_BoolProperty,
    0,
    0,
    0
},
    &rviz::BoolProperty::staticMetaObject,
    0,
    0
};
