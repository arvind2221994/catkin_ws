# These parameters set thresholds on obstacle information put into the
# costmap.
# The "obstacle_range" parameter determines the maximum range
# sensor reading that will result in an obstacle being put into the
# costmap. Here, we have it set at 2.5 meters, which means that the
# robot will only update its map with information about obstacles that
# are within 2.5 meters of the base.
obstacle_range: 2

# The "raytrace_range" parameter determines the range to which we will
# raytrace freespace given a sensor reading. Setting it to 3.0 meters
# as we have above means that the robot will attempt to clear out
# space in front of it up to 3.0 meters away given a sensor reading.
raytrace_range: 2.5

# Here we set either the footprint of the robot or the radius of the
# robot if it is circular. In the case of specifying the footprint,
# the center of the robot is assumed to be at (0.0, 0.0) and both
# clockwise and counterclockwise specifications are supported.
#footprint: [[x0, y0], [x1, y1], ... [xn, yn]]
footprint: [[-0.35, -0.25], [0.35, -0.25], [0.35, 0.25], [-0.35, 0.25]]
#robot_radius: 0.1

# We'll also set the inflation radius for the costmap. The inflation
# radius should be set to the maximum distance from obstacles at which
# a cost should be incurred. For example, setting the inflation radius
# at 0.55 meters means that the robot will treat all paths that stay
# 0.55 meters or more away from obstacles as having equal obstacle cost.
inflation_radius: 0.3

# The "observation_sources" parameter defines a list of sensors that
# are going to be passing information to the costmap separated by
# spaces.
# observation_sources: laser_scan_sensor point_cloud_sensor
observation_sources: laser_scan_sensor

# This line sets parameters on a laser_scan_sensor. The "frame_name"
# parameter should be set to the name of the coordinate frame of the
# sensor, the "data_type" parameter should be set to LaserScan or
# PointCloud depending on which message the topic uses, and the
# "topic_name" should be set to the name of the topic that the sensor
# publishes data on. The "marking" and "clearing" parameters determine
# whether the sensor will be used to add obstacle information to the
# costmap, clear obstacle information from the costmap, or do both.
laser_scan_sensor: {
    data_type: LaserScan,
    topic: scan_filtered,
    #sensor_frame: /base_link,
    clearing: true,
    marking: true,
    expected_update_rate: 1.0
}

#point_cloud_sensor: {
  #data_type: PointCloud2,
  #topic: camera/depth/points_drop,
  # sensor_frame: frame_name,
  #clearing: true,
  #marking: true,

  # The maximum height of any obstacle to be inserted into the costmap in
  # meters. This parameter should be set to be slightly higher than the height
  # of your robot. (double, default: 2.0)
  #max_obstacle_height: 1.0,

  # The maximum range in meters at which to insert obstacles into the costmap
  # using sensor data. (double, default: 2.5)
  # obstacle_range: 1.0,
#}
