# The base_local_planner is responsible for computing velocity
# commands to send to the mobile base of the robot given a high-level
# plan.
#
# We'll need to set some configuration options based on the specs of
# our robot to get things up and running.
#
# Note: This section covers only basic configuration options for the
# TrajectoryPlanner. For documentation on the full range of opitons,
# please see the base_local_planner documentation.
# http://www.ros.org/wiki/move_base#Parameters
# http://www.ros.org/wiki/base_local_planner#Parameters

### The rate in Hz at which to run the control loop and send velocity commands to the base (default: 20.0)
controller_frequency: 60

TrajectoryPlannerROS:
### The first section of parameters above define the velocity limits of the robot.

    # The maximum forward velocity allowed for the base in meters/sec (double, default: 0.5)
    max_vel_x: 0.6

    # The minimum forward velocity allowed for the base in meters/sec. It is
    # useful to specify this to guarantee that velocity commands sent to a mobile
    # base are high enough to allow the base to overcome friction. (double, default: 0.1)
    min_vel_x: 0.1

    # The maximum rotational velocity allowed for the base in radians/sec (double, default: 1.0)
    max_rotational_vel: 1.0

    # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec  (double, default: 0.4)
    min_in_place_rotational_vel: 0.4

### The second section defines the acceleration limits of the robot.

    # The rotational acceleration limit of the robot in radians/sec^2 (double, default: 3.2)
    acc_lim_theta: 2.5

    # The x acceleration limit of the robot in meters/sec^2 (double, default: 2.5)
    acc_lim_x: 1.5
    acc_lim_y: 0

    # An automobile is an example of a non-holonomic vehicle. The vehicle has
    # three degrees of freedom—its position in two axes, and its orientation
    # relative to a fixed heading. Yet it has only two controllable degrees of
    # freedom—acceleration/braking and the angle of the steering wheel—with
    # which to control its position and orientation. A car's heading (the
    # direction in which it is traveling) must remain aligned with the
    # orientation of the car, or 180° from it if the car is in reverse. It has
    # no other allowable direction, assuming there is no skidding or sliding.
    # Thus, not every path in phase space is achievable; however, every path can
    # be approximated by a holonomic path – this is called a (dense) homotopy
    # principle. The non-holonomicity of a car makes parallel parking and
    # turning in the road difficult, but the homotopy principle says that these
    # are always possible, assuming that clearance exists.
    holonomic_robot: false

### Goal Tolerance Parameters

    # Set the tolerance on achieving a goal
    #xy_goal_tolerance: 0.1
    #yaw_goal_tolerance: 0.05
    #latch_xy_goal_tolerance: true

### Trajectory Scoring Parameters

    # The cost function used to score each trajectory is in the following form:
    # cost =
    # path_distance_bias * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
    # + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
    # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

# http://www.ros.org/wiki/navigation/Tutorials/Navigation%20Tuning%20Guide

    # Whether the goal_distance_bias and path_distance_bias parameters should assume that
    # goal_distance and path_distance are expressed in units of meters or cells.
    # Cells are assumed by default. New in navigation 1.3.1
    # meter_scoring (bool, default: false)
    meter_scoring: true

    # The weighting for how much the controller should stay close to the path it was given
    path_distance_bias: 0.6

    # The weighting for how much the controller should attempt to reach its local goal, also controls speed
    goal_distance_bias: 0.7

    # The weighting for how much the controller should attempt to avoid obstacles
    occdist_scale: 0.01

    # How far to look ahead in meters when scoring different in-place-rotation trajectories
    #heading_lookahead: 0.325

    # Whether to score based on the robot's heading to the path or its distance from the path
    # heading_scoring_timestep (double, default: 0.8)
    # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
    #heading_scoring: false

    # We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
    dwa: true

### Global Plan Parameters

    # Eat up the plan as the robot moves along it
    prune_plan: true

### Other

    escape_vel: -0.4
    sim_time: 1.0
    vtheta_samples: 50
    occdist_scale: 0.01
