<launch>
    <!--- Run AMCL -->
    <include file="$(find maiss_nav)/launch/amcl.launch" />

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find maiss_nav)/config/costmap_common_params_stage.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find maiss_nav)/config/costmap_common_params_stage.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find maiss_nav)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find maiss_nav)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find maiss_nav)/config/base_local_planner_params.yaml" command="load" />
        <param name="base_global_planner" type="string" value="navfn/NavfnROS" />
        <param name="controller_frequency" type="double" value="20.0" />
        <rosparam param="recovery_behaviors">[{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery},
                                              {name: move_rightward_recovery, type: move_rightward_recovery/MoveRightwardRecovery},
                                              {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]</rosparam>
        <param name="planner_frequency" type="double" value="0.1"/>
        <param name="planner_patience" type="double" value="2.0"/>
        <param name="controller_patience" type="double" value="60.0"/>
        <remap from="map" to="/map"/>
    </node>
    
    <node pkg="maiss_nav" type="patrol_area_server" respawn="false" name="patrol_area" output="screen"/>
    
    <rosparam file="$(find maiss_nav)/config/move_to_event_position_params.yaml" ns="move_to_event_position_params"/>
    <node pkg="maiss_nav" type="move_to_event_position_server" respawn="false" name="move_to_event_position" output="screen"/>
    
    <rosparam file="$(find maiss_nav)/config/other_agent_obstacles_params.yaml" ns="other_agent_obstacles_params"/>
    <node pkg="maiss_nav" type="other_agent_obstacles_publisher" respawn="false" name="other_agent_obstacles_publisher" output="screen"/>
    
    <node pkg="maiss_nav" name="move_base_supervisor" type="move_base_supervisor.py" respawn="true"/>

    <node pkg="maiss_nav" name="maiss_stuck_robot_monitor" type="maiss_stuck_robot_monitor" respawn="true"/>
</launch>
