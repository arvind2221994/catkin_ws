#include <opencv2/opencv.hpp>
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include<ros/ros.h>
#include <sstream>
#include <std_msgs/Int32.h>
#include <opencv/cv.h>
#include <algorithm>
int block1(cv::Mat &image,int io, int jo)
int block2(cv::Mat &image,int io,int jo)

using namespace cv;
using namespace std;
int i,j;
int maxValue;int minValue;
int amax( int *array, int maxSizeOfArray )
{
 maxValue = *array;
for(i = 0; i < maxSizeOfArray; i++){
if (*array > maxValue)
maxValue = *array;
array++;}
return maxValue;
}
int amin( int *array, int maxSizeOfArray )
{
 minValue = *array;
for(i = 0; i < maxSizeOfArray; i++){
if (*array < minValue)
minValue = *array;
array++;}
return minValue;
}


int main(int argc, char* argv[])
{
   VideoCapture cap(0); // open the video camera no. 0
   if (!cap.isOpened())  // if not success, exit program
 {  	cout<<"error1"<<endl;
  return 0;
   }
   while (1)
   {Mat frame;
  bool bSuccess = cap.read(frame);
	// read a new frame from video
if (!bSuccess) //if not success, break loop
{
 cout<<"error2"<<endl;
  break;
}
ros::init(argc,argv,"shaastra_pub");
ros::NodeHandle n;
ros::Publisher angle_pub1 = n.advertise<std_msgs::Int32>("anglemsg1", 1000);//topic name msg,variable angle_pub
ros::Publisher angle_pub2 = n.advertise<std_msgs::Int32>("anglemsg2", 1000);
ros::Publisher angle_pub3 = n.advertise<std_msgs::Int32>("anglemsg3", 1000);
ros::Publisher angle_pub4 = n.advertise<std_msgs::Int32>("anglemsg4", 1000);
//creating image for subgrid1in
float  rh= frame.rows/4000;
float  rv= frame.cols/4000;
cv::Mat sg1(1080,1080,CV_8UC3);
for(i=0;i<sg1.cols; i++){
for(j=0;j<sg1.rows;j++){
sg1.at<cv::Vec3b>(i,j)[0]= frame.at<cv::Vec3b>(i+910*rh,j+2000*rv)[0];
sg1.at<cv::Vec3b>(i,j)[1]= frame.at<cv::Vec3b>(i+910*rh,j+2000*rv)[1];
sg1.at<cv::Vec3b>(i,j)[2]= frame.at<cv::Vec3b>(i+910*rh,j+2000*rv)[2];
}}
// 1430,2520
//creating image for subgrid2
cv::Mat sg2(1080,1080,CV_8UC3);
for(i=0;i<sg2.cols; i++){
for(j=0;j<sg2.rows;j++){
sg2.at<cv::Vec3b>(i,j)[0]= frame.at<cv::Vec3b>(i+1950*rh,j+2000*rv)[0];
sg2.at<cv::Vec3b>(i,j)[1]= frame.at<cv::Vec3b>(i+1950*rh,j+2000*rv)[1];
sg2.at<cv::Vec3b>(i,j)[2]= frame.at<cv::Vec3b>(i+1950*rh,j+2000*rv)[2];
}}
//2470,2520
//creating image for subgrid3
cv::Mat sg3(1080,1080,CV_8UC3);
for(i=0;i<sg3.cols; i++){
for(j=0;j<sg3.rows;j++){
sg3.at<cv::Vec3b>(i,j)[0]= frame.at<cv::Vec3b>(i+910*rh,j+1070*rv)[0];
sg3.at<cv::Vec3b>(i,j)[1]= frame.at<cv::Vec3b>(i+910*rh,j+1070*rv)[1];
sg3.at<cv::Vec3b>(i,j)[2]= frame.at<cv::Vec3b>(i+910*rh,j+1070*rv)[2];
}}
//1430,1590
//creating image for subgrid4
cv::Mat sg4(1080,1080,CV_8UC3);
for(i=0;i<sg4.cols; i++){
for(j=0;j<sg4.rows;j++){
sg4.at<cv::Vec3b>(i,j)[0]= frame.at<cv::Vec3b>(i+1950*rh,j+1070*rv)[0];
sg4.at<cv::Vec3b>(i,j)[1]= frame.at<cv::Vec3b>(i+1950*rh,j+1070*rv)[1];
sg4.at<cv::Vec3b>(i,j)[2]= frame.at<cv::Vec3b>(i+1950*rh,j+1070*rv)[2];
}}//2470,1590
std_msgs::Int32 angle1;
std_msgs::Int32 angle2;
std_msgs::Int32 angle3;
std_msgs::Int32 angle4;
 angle1.data=block1(sg1,1430,2520);//for left entry
 angle2.data=block2(sg2,2470,2520);
 angle3.data=block1(sg3,1430,1590);
 angle4.data=block2(sg4,2470,1590);
ROS_INFO("angle1  %d \n", angle1.data);
ROS_INFO("angle2 %d\n", angle2.data);
ROS_INFO(" angle3 %d\n", angle3.data);
ROS_INFO("angle4  %d\n", angle4.data);
angle_pub1.publish(angle1);
angle_pub2.publish(angle2);
angle_pub3.publish(angle3);
angle_pub4.publish(angle4);

/*int angle1=block2(sg1);//for right entry
int angle2=block1(sg2);
int angle3=block2(sg3);
int angle4=block1(sg4);*/

ros::spinOnce();
return 0;
}}
int block1(cv::Mat &image,int io, int jo) //left side cp
{
int c[4],x[4],y[4],cx[4],cy[4];
 c[0]=0;
c[1]=0;
c[2]=0;
c[3]=0;
x[0]=0;
x[1]=0;
x[2]=0;
x[3]=0;
y[0]=0;
y[1]=0;
y[2]=0;
y[3]=0;
cx[0]=0;
cx[1]=0;
cx[2]=0;
cx[3]=0;
cy[0]=0;
cy[1]=0;
cy[2]=0;
cy[3]=0;  //x={0,0,0,0}; y={0,0,0,0};  cx={0,0,0,0};  cy={0,0,0,0};

for(i=0;i<image.rows; i++){
for(j=0;j<image.cols;j++){
if(image.at<cv::Vec3b>(i,j)[0]>=220,image.at<cv::Vec3b>(i,j)[1]<=30,image.at<cv::Vec3b>(i,j)[2]<=30){  //r
c[0]++;
x[0] += i*1;
y[0]+= j*1;
}
if(image.at<cv::Vec3b>(i,j)[0]<=30,image.at<cv::Vec3b>(i,j)[1]>=220,image.at<cv::Vec3b>(i,j)[2]<=30){//g
c[1]++;
x[1]+= i*1;
y[1] += j*1;

}
if(image.at<cv::Vec3b>(i,j)[0]<30,image.at<cv::Vec3b>(i,j)[1]<=0,image.at<cv::Vec3b>(i,j)[2]>=220){
c[2]++; //b
x[2]+= i*1;
y[2]+= j*1;

}
if(image.at<cv::Vec3b>(i,j)[0]>=220,image.at<cv::Vec3b>(i,j)[1]>=220,image.at<cv::Vec3b>(i,j)[2]<30){//y
c[3]++;
x[3] += i*1;
y[3]+= j*1;
}
for (i=0;i<4;i++)
 {
cx[i]+=x[i]/c[i];
cx[j]+=x[j]/c[j];}}}
//finding out centre of gravity for each colour

int mx,mn; int k[4];
mx=amax(&c[0],4);
mn=amin(&c[0],4);
int s,t;
if(mn==c[0])
{s=0;}
else if(mn==c[1])
{s=1;}
else if(mn==c[2])
{s=2;}
else if(mn==c[3])
{s=3;}

if(mx==c[0])
{ t=0;}
else if(mx==c[1])
{ t=1;}
else if(mx==c[2])
{ t=2;}
else
{ t=3;}




// io,jo be junction coordinates
for (i=0;i<4;i++)
{
if(cx[i]>io&&cy[i]>jo)
{
k[i]=0;
}
else if(cx[i]<io&&cy[i]>jo)
{
k[i]=1;
}

else if(cx[i]<io&&cy[i]<jo)
{
k[i]=2;
}
else
{
k[i]=3;
}
}
int sum=0;
for (i=0;i<4;i++)
{ sum=sum+k[i];}
sum=sum-k[t];
k[t]=6-sum;
int diff,angle;
diff = k[t]-k[s];
if(diff >0)
{
angle = k[t]*90+10;

}
else if (diff<0)
{ angle = k[t]*90+370;}

return angle;}

int block2(cv::Mat &image,int io,int jo) //right side cp
{int c[4],x[4],y[4],cx[4],cy[4];
 c[0]=0;
c[1]=0;
c[2]=0;
c[3]=0;
x[0]=0;
x[1]=0;
x[2]=0;
x[3]=0;
y[0]=0;
y[1]=0;
y[2]=0;
y[3]=0;
cx[0]=0;
cx[1]=0;
cx[2]=0;
cx[3]=0;
cy[0]=0;
cy[1]=0;
cy[2]=0;
cy[3]=0; 

for(i=0;i<image.rows; i++){
for(j=0;j<image.cols;j++){
if(image.at<cv::Vec3b>(i,j)[0]>=220,image.at<cv::Vec3b>(i,j)[1]<=30,image.at<cv::Vec3b>(i,j)[2]<=30){  //r
c[0]++;
x[0] += i*1;
y[0]+= j*1;
}
if(image.at<cv::Vec3b>(i,j)[0]<=30,image.at<cv::Vec3b>(i,j)[1]>=220,image.at<cv::Vec3b>(i,j)[2]<=30){//g
c[1]++;
x[1]+= i*1;
y[1] += j*1;

}
if(image.at<cv::Vec3b>(i,j)[0]<30,image.at<cv::Vec3b>(i,j)[1]<=0,image.at<cv::Vec3b>(i,j)[2]>=220){
c[2]++; //b
x[2]+= i*1;
y[2]+= j*1;

}
if(image.at<cv::Vec3b>(i,j)[0]>=220,image.at<cv::Vec3b>(i,j)[1]>=220,image.at<cv::Vec3b>(i,j)[2]<30){//y
c[3]++;
x[3] += i*1;
y[3]+= j*1;
}
for (i=0;i<4;i++)
 {
cx[i]+=x[i]/c[i];
cx[j]+=x[j]/c[j];}}}
//finding out centre of gravity for each colour

int mx,mn; int k[4];
//mx=cv::max(c[0],c[1],c[2],c[3]);
//mn=cv::min(c[0],c[1],c[2],c[3]);
mx=amax(&c[0],4);
mn=amin(&c[0],4);


int s,t;

if(mn==c[0])
{s=0;}
else if(mn==c[1])
{s=1;}
else if(mn==c[2])
{s=2;}
else if(mn==c[3])
{s=3;}

if(mx==c[0])
{ t=0;}
else if(mx==c[1])
{ t=1;}
else if(mx==c[2])
{ t=2;}
else
{ t=3;}

// io,jo be junction coordinates
for (i=0;i<4;i++)
{
if(cx[i]>io&&cy[i]>jo)
{
k[i]=1;
}
else if(cx[i]<io&&cy[i]>jo)
{
k[i]=0;
}

else if(cx[i]<io&&cy[i]<jo)
{
k[i]=3;
}
else
{
k[i]=2;
}
}
int sum=0;
for (i=0;i<4;i++)
{ sum=sum+k[i];}
sum=sum-k[t];
k[t]=6-sum;
int diff,angle;
diff = k[t]-k[s];
if(diff >0)
{
angle = k[t]*90+10;

}
else if (diff<0)
{ angle = k[t]*90+370;}

return angle;}

